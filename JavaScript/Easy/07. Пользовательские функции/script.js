// -- Основы работы с пользовательскими функциями
// Сделайте функцию, выводящую в консоль ваше имя.
// function myName() {
//     console.log('Капурин Никита');
// }
// myName();

// Сделайте функцию, выводящую в консоль сумму чисел от 1 до 100.
// function sumSto() {
//     let result = 0;
//     for (let i = 1; i < 101; i++) {
//         result += i;
//     }
//     console.log(result);
// }
// sumSto();


// -- Параметры функций
// Сделайте функцию, которая параметром принимает число и выводит в консоль куб этого числа.
// function cube(num) {
//     console.log(num ** 3);
// }
// cube(5);

// Сделайте функцию, которая параметром принимает число и проверяет,
// положительное это число или отрицательное.
// В первом случае пусть функция выводит в консоль текст '+++', а во втором '---'.
// function isPositive(num) {
//     if (num >= 0) {
//         console.log('+++');
//     } else {
//         console.log('---');
//     }
// }
// isPositive(1);
// isPositive(-1);


// -- Несколько параметров функций
// Сделайте функцию, которая параметрами принимает 3 числа и выводит в консоль сумму этих чисел.
// function sumTrio (num1, num2, num3) {
//     console.log(num1 + num2 + num3);
// }
// sumTrio(5, 5, 5);


// -- Инструкция return
// Сделайте функцию, которая параметром принимает число, а возвращает куб этого числа.
// С помощью этой функции найдите куб числа 3 и запишите его в переменную res.
// function cube(num) {
//     return num ** 3;
// }
// let res = cube(5);
// console.log(res);

// Сделайте функцию, которая параметром принимает число, а возвращает квадратный корень из этого числа.
// С помощью этой функции найдите корень числа 3, затем найдите корень числа 4.
// Просуммируйте полученные результаты и выведите их в консоль.
// function mySqrt(num) {
//     return Math.sqrt(num);
// }
// let result1 = mySqrt(3);
// let result2 = mySqrt(4);
// console.log(result1 + result2);


// -- Последовательный вызов функций
// Пусть у вас есть функция, возвращающая квадратный корень из числа,
// и функция, округляющая дробь до трех знаков в дробной части:
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function round(num) {
// 	return num.toFixed(3);
// }
// С помощью этих функций найдите квадратный корень из числа 2 и округлите его до трех знаков в дробной части.
// console.log(round(sqrt(2)));

// Пусть у вас есть функция, возвращающая квадратный корень из числа,
// и функция, возвращающая сумму трех чисел:
// function sqrt(num) {
// 	return Math.sqrt(num);
// }
// function sum(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// // С помощью этих функций найдите сумму корней чисел 2, 3 и 4 и запишите ее в переменную res
// let res = sum(sqrt(2), sqrt(3), sqrt(4));
// console.log(res);


// -- Применение return в циклах
// Напишите функцию, которая параметром будет принимать число и делить его на 2 столько раз,
// пока результат не станет меньше 10. Пусть функция возвращает количество итераций, которое потребовалось для достижения результата.
// function isTwo(num) {
//     let result = 1;
//     while (num > 10) {
//         num /= 2;
//         result++;
//     }
//     return result;
// }
// console.log(isTwo(80));


// -- Флаги в функциях
// Сделайте функцию, которая параметром будет принимать массив с числами,
// и проверять, что все элементы в этом массиве являются четными числами.
// function isPositiveArr(arr) {
//     let flag = true;
//     for (let elem of arr) {
//         if (elem % 2 !== 0) {
//             flag = false;
//         }
//     }
//     return flag;
// }
// console.log(isPositiveArr([1, 2, 3, 4]));

// Сделайте функцию, которая параметром будет принимать число и проверять,
// что все цифры это числа являются нечетными.
// function numNotPositive (num) {
//     let flag = true;
//     let str = String(num);
//     for (let i = 0; i < str.length; i++) {
//         if (Number(str[i]) % 2 === 0) {
//             flag = false;
//         }
//     }
//     return flag;
// }
// console.log(numNotPositive(3));

// Сделайте функцию, которая параметром будет принимать массив и проверять,
// есть ли в этом массиве два одинаковых элемента подряд.
// function duble(arr) {
//     let flag = true;
//     for(let i = 0; i < arr.length; i++) {
//         if (arr[i] == arr[i - 1]) {
//             flag = false;
//         }
//     }
//     return flag
// }
// console.log(duble([2, 1, 3, 3]));
